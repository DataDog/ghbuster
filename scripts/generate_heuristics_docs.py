import sys

from ghbuster import TargetType
from ghbuster.heuristics import ALL_HEURISTICS

START_MARKER = "<!-- BEGIN_RULE_LIST -->\n"
END_MARKER = "<!-- END_RULE_LIST -->\n"


def generate_docs() -> str:
    output = ''
    output += "### Repository heuristics\n\n"
    output += '| **ID** | **Name** | **Description** |\n'
    output += '|:-:|:-:|:-:|\n'
    heuristics = sorted(ALL_HEURISTICS, key=lambda h: h.id())
    for heuristic in heuristics:
        if heuristic.target_type() == TargetType.REPOSITORY:
            # Print the filename where this heuristic is defined
            filename = heuristic.__module__.replace('.', '/') + '.py'
            description = heuristic.description()
            description = description.replace("\n", "")
            output += f'| [{heuristic.id()}](./{filename}) | {heuristic.friendly_name()} | {description} |\n'
    output += "\n\n"

    output += "### GitHub user heuristics\n\n"
    output += '| **ID** | **Name** | **Description** |\n'
    output += '|:-:|:-:|:-:|\n'
    for heuristic in heuristics:
        if heuristic.target_type() == TargetType.USER:
            filename = heuristic.__module__.replace('.', '/') + '.py'
            description = heuristic.description()
            description = description.replace("\n", "")
            output += f'| [{heuristic.id()}](./{filename}) | {heuristic.friendly_name()} | {description} |\n'
    output += "\n\n"
    return output


def inject_docs(file_name: str, new_docs: str):
    with open(file_name, 'r') as f:
        contents = "".join(f.readlines())

    start = end = 0
    try:
        start = contents.index(START_MARKER)
        end = contents.index(END_MARKER)
    except ValueError:
        sys.stderr.write(f"Unable to inject docs in {file_name}, missing start or end marker")
        exit(1)

    before = contents[0:start]
    after = contents[end:]

    new_contents = before + START_MARKER + new_docs + after  # 'after' already contains the end marker
    with open(file_name, 'w') as f:
        f.write(new_contents)
    print(f'Wrote autogenerated docs to {file_name}')


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print(generate_docs())
    elif len(sys.argv) == 2:
        file = sys.argv[1]
        print(f'Generating docs and injecting into {file}')
        inject_docs(file, generate_docs())
